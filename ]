#include <iostream>
#include <fstream>
#include <stack>


using namespace std; 

bool debug = true;

const char arithmeticOperators[5] = {'+','-','*','/','%'};
const char relationalOperators[3] = {'<','>','='};
const char logicalOperators[2] = {'&','|'};

int get_precedence(char op)
{
	char operators[10] = {'+','-','*','/','%','<','>','=','&','|'};
	int precedence[10] = {3,3,4,4,4,2,2,2,1,1};
	for(int i = 0; i<10; i++)
	{
		if(op==operators[i])
		{
			return precedence[i];
		}
	}
	if(op == ')' || op == '(')
		return -1;
	return -1;
}

bool is_number(char x)
{
	return (x=='0'||x=='1'||x=='2'||x=='3'||x=='4'||
		x=='5'||x=='6'||x=='7'||x=='8'||x=='9');
}

string infix_to_postfix(string exp)
{
	stack<char> postfixStack;
	string postfixString = "";
	int size = exp.length(), operatorPrecedence = 0, nextOperatorInStackPrecedence = 0, opIndex;
	char c;
	for(int i = 0; i<size; i++)
	{
		c = exp.c_str()[i];	
		if(debug)
			cout<<"DEBUG::Evaluating char... "<<c<<endl;
		switch(c)
		{
			case '(': postfixStack.push(c);
				if(debug)
					cout<<"DEBUG:: Found (, pushed to stack... "<<postfixStack.top()<<endl;
				break;
			case ')': 
				  while(postfixStack.size()>0 && postfixStack.top()!='(')
				  {
					if(debug)
						cout<<"DEBUG:: Concatenating: "<<postfixStack.top()<<endl;
					postfixString += postfixStack.top();
					postfixStack.pop();
				  }
				  postfixStack.pop();
				 if(debug)
				 {
				 	cout<<"DEBUG:: Found (, popped to final string... "<<endl;
				 	cout<<postfixString<<endl;
				 }
				break;
			default:
				if(is_number(c))
				{
					if(debug) cout<<"DEBUG:: found an operand. Concatenating it."<<endl;
					postfixString+=c;
					if(debug) cout<<"DEBUG:: Concatenated the operand."<<endl;
				}
				else
				{
					operatorPrecedence = get_precedence(c);
					nextOperatorInStackPrecedence = get_precedence(postfixStack.top());
					while(postfixStack.size()>0 && c!='(' && operatorPrecedence<=nextOperatorInStackPrecedence)
					{
						postfixString+=postfixStack.top();
						postfixStack.pop();
					}
					postfixStack.push(c);
				}
				break;
				
		}//End of switch block...
	}//End of for loop
	while(postfixStack.size()>0)
	{
		postfixString += postfixStack.top();
		postfixStack.pop();
	}
	if(debug) cout<<"DEBUG::Postfix conversion finished, "<<postfixString<<endl;
	return postfixString; 
}

string infix_to_prefix(string exp)
{
	string prefixString = "";
	stack<char> prefixStack;
	
	return prefixString;
}	

int main()
{
	string inputFileName;
	//string expression = "1/(4+2)-3";
	//string expression = "4+5*6";
	string expression = "2*3-4/5";
	//string expression = "(5-6)*7";
	string my_postfix, my_prefix;
	my_postfix = infix_to_postfix(expression);
	cout<<"Esta es la expresión convertida a postfix: "<<my_postfix<<endl;
	cout<<"Esta es la expresión convertida a prefix: "<<my_prefix<<endl;
}
